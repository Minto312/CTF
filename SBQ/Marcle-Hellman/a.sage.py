

# This file was *autogenerated* from the file a.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_100 = Integer(100); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)#!/usr/bin/env sagemath
# ref: https://kmyk.github.io/blog/writeups/ctf-2015-plaidctf-2015-lazy/
# load values
import ast

with open('pubkey.txt') as fh:
    b = ast.literal_eval(fh.read())
with open('ciphertext.txt') as fh:
    c = int(fh.read())
    
n = len(b)
print('[*] pubkey: b =', b)
print('[*] ciphertext: c =', c)

# check the density
d = float(n / log(max(b), _sage_const_2 ))
print('[*] density: d =', d)


# low-density attack, CLOS method
# prepare a basis
MULTIPLIER = _sage_const_100 
B = matrix(ZZ, n + _sage_const_1 , n + _sage_const_1 )
B.set_block(_sage_const_0 , _sage_const_0 , MULTIPLIER * matrix(n, _sage_const_1 , b))
B.set_block(n, _sage_const_0 , MULTIPLIER * matrix([ - c ]))
B.set_block(_sage_const_0 , _sage_const_1 , _sage_const_2  * identity_matrix(n))
B.set_block(n, _sage_const_1 , matrix([ -_sage_const_1  ] * n))
#print('[*] basis: B =', B)

# LLL algorithm
out_text = ''
for x in B.LLL():
    #if x[0] == 0 and all(x_i in [-1, +1] for x_i in x[1 :]):
    if _sage_const_1 :
        #print('[*] found: x =', x)

        # decode x
        m = _sage_const_0 
        for x_i in reversed(x[_sage_const_1  :]):
            m *= _sage_const_2 
            m += int(x_i == +_sage_const_1 )
        print('[*] plaintext: m =', m)
        #print('[*]', repr(hex(m).decode('hex')))
        #print('[*]', repr(hex(m).decode('hex')))
        #out_text += f'm = {m}\n'
        #out_text += repr(hex(m).decode('hex')) + '\n\n'

# write the output
with open('a_out.txt', 'w') as f:
    f.write(out_text)

